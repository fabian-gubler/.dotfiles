#!/bin/sh

# Author: Fabian Gubler, Github: https://github.com/fabian-gubler 

# Steps needed to turn off alarm:
	# 1. Turn on brightness / screen
	# 2. Remove at commands
	# 3. killall mpv

# Ways to enforce waking up:
	# Current: Put keyboard in a different room
	# Better: Avoid being able to turn off device
	# - e.g. scheduled donation (need to turn off)
	# Advanced: Implement QR Code / Geolocation unlocking


# Declare the paths to the mp3 files as variables
soothing_file="$HOME/nextcloud/media/music/soothing/weightless.mp3"
normal_file="$HOME/nextcloud/media/music/regular/resonance.opus"
force_file="$HOME/nextcloud/media/music/force/wake-up.mp3"

# Declare the volumes of the mp3 files as variables
soothing_volume=30
normal_volume=70
force_volume=100

check_dependencies() {
	# Check if mpv is installed
	if ! command -v mpv &> /dev/null
	then
		echo "Error: mpv is not installed. Please install mpv before running this script."
		exit 1
	fi

	if ! command -v tput &> /dev/null
	then
		echo "Error: ncurses is not installed. Please install ncurses before running this script."
		exit 1
	fi

	if ! command -v at &> /dev/null
	then
		echo "Error: at is not installed. Please install at before running this script."
		exit 1
	fi
}

# Provide brief description on usage
parse_args() {

	# Check if time is given as input
	if [ $# -eq 0 ]
	then
		# Ask the user to enter time if no input is given
		read -p "Do you want to schedule the alarm in 8 hours? [y/n]: " answer
		if [ "$answer" == "y" ]; then
			time=$(date --date='8 hours' +%H:%M)
		else
			read -p "Enter the time for the alarm in 24h format (HH:MM): " time
		fi
	else
		time=$1
		fi
}

validate_time() {
    # Regular expression to match the time format (HH:MM)
    local time_regex="^([0-9]|0[0-9]|1[0-9]|2[0-3]):[0-5][0-9]$"

    if [[ $time =~ $time_regex ]]; then
		return 0
    else
        echo "Invalid input. Please use the format HH:MM (e.g. 14:30)"
		exit 1
    fi
}

check_files() {
	# Check if the mp3 files exist
	if [ ! -f "$soothing_file" ]; then
		echo "Error: $soothing_file does not exist"
		exit 1
	fi

	if [ ! -f "$normal_file" ]; then
		echo "Error: $normal_file does not exist"
		exit 1
	fi

	if [ ! -f "$force_file" ]; then
		echo "Error: $force_file does not exist"
		exit 1
	fi
}

schedule_alarm() {

	# Schedule the volume and unmute commands to run at the given time
	echo "wpctl set-mute @DEFAULT_AUDIO_SINK@ 0" | at $time > /dev/null 2>&1
	echo "wpctl set-volume @DEFAULT_AUDIO_SINK@ 100%" | at $time > /dev/null 2>&1

	# Schedule the first mp3 file to play at the given time with low volume
	echo "mpv --volume=$soothing_volume --length=60 $soothing_file" | at $time > /dev/null 2>&1

	# Schedule the second mp3 file to play 10 minutes after the first alarm with normal volume
	echo "mpv --volume=$normal_volume --length=60 $normal_file" | at $time + 10 minutes > /dev/null 2>&1

	# Schedule the third mp3 file to play 20 minutes after the first alarm with high volume
	echo "mpv --volume=$force_volume --loop=inf $force_file" | at $time + 20 minutes > /dev/null 2>&1
}

confirm_schedule() {
	# Define variables for formatting
	bold=$(tput bold)
	normal=$(tput sgr0)
	green=$(tput setaf 2)
	blue=$(tput setaf 4)
	yellow=$(tput setaf 3)

	# Pretty print that the alarms have been scheduled
	printf "%b%bPlaying: %b %-20s %b %-20s %b with $soothing_volume volume%b\n" "${bold}" "${green}" "${blue}" "$(basename $soothing_file)" "${yellow}" "$time" "${green}" "${normal}"
	printf "%b%bPlaying: %b %-20s %b %-20s %b with $normal_volume volume%b\n" "${bold}" "${green}" "${blue}" "$(basename $normal_file)" "${yellow}" "$time + 10 minutes" "${green}" "${normal}"
	printf "%b%bPlaying: %b %-20s %b %-20s %b with $force_volume volume%b\n" "${bold}" "${green}" "${blue}" "$(basename $force_file)" "${yellow}" "$time + 20 minutes" "${green}" "${normal}"

}

test_sound() {
    echo "Verify sound playback..."
	echo ""

	# Output sample to verify audio/dependencies are working
	wpctl set-mute @DEFAULT_AUDIO_SINK@ 0
	wpctl set-volume @DEFAULT_AUDIO_SINK@ 100%
	mpv --volume=$normal_volume --length=3 $normal_file
}


# Main Function
main() {
	check_dependencies
	parse_args
	validate_time
	check_files
	schedule_alarm
	confirm_schedule
	test_sound
}

# Test sound
if [[ $1  == "-t" ]]; then
	test_sound
	exit 0
fi

# Check if the Script is being run directly
if [[ "${BASH_SOURCE[0]}" == "$0" ]]; then
    main
fi
